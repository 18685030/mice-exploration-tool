@page
@model base64ToImageModel
@{
    //ViewData["Title"] = "base64ToImage";
}

@functions
{

}


<!DOCTYPE html>
<html>
<head>
    <title>Base64 Image</title>
    <link rel="stylesheet" href="css/base64ToImage.css">

    <!-- include the cornerstone library -->
    <script src="https://unpkg.com/cornerstone-wado-image-loader@3.0.6/dist/cornerstoneWADOImageLoader.min.js"></script>
    <script src="js/cornerstone.min.js"></script>
    <script src="js/cornerstoneMath.min.js"></script>
    <script src="js/cornerstoneTools.min.js"></script>
    <script src="js/dicomParser.min.js"></script>
    <script src="js/cornerstoneWADOImageLoader.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>


</head>

<body>

    <div id="header">Image taken from a URL, converted to Base64 and then converted back to an Image.</div>


    <!--Button samples to trigger call to another page from code behind -->
    <form method="POST">
        <button type="submit" class="btn btn-dark" asp-page="/Index">Home</button>
        <button class="btn btn-warning" asp-page="/dicomImageToGrid" asp-page-handler="Males">What I want to happen</button>
        <!--<input asp-for="Message" /> <input type="submit" class="btn btn-warning" />-->
    </form>


    <!--Test IMageMap property -->
    <img src="https://raw.githubusercontent.com/18685030/DicomTestImages/master/SampleTestImages/mouse.jpeg" alt="mouse" usemap="#mouseMap" width="400" height="400">


    @Html.AntiForgeryToken()
    <form method="POST">
        <map name="mouseMap">
            <area shape="rect" id="btnGet" coords="50,50,150,150" href="#" alt="body" />
            <area shape="rect" coords="250,250,350,350" href="#" alt="paw" />
        </map>
    </form>




        <!--Div that DICOM images are dynamically appended to to show as a grid -->
        <div class="images">
            <div id="dicomImage"></div>
        </div>



</body>

</html>




<!-- javascript to convert base64 to jpg and jpeg to base64 -->

<script>

    //Look for image and note click on its cor-ordinates

    $(document).ready(function () {
        $("img").on("click", function (event) {

        var x = event.pageX - this.offsetLeft;
        var y = event.pageY - this.offsetTop;

        $.ajax
            ({
                type: "POST",
                url: "/base64ToImage?handler=Button",

                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },

                //dataType: "text",
                //success: function (result) {
                //    alert(result);
                //},
                error: function (status, ex) {
                    console.log("Error Code: Status: " + status + " Ex: " + ex);
                }
            });


        console.log("X Coordinate: " + x + " Y Coordinate: " + y);

    });
    });








// >>>>>>> Part A: Convert image to Base64

    //var imageURL = 'https://raw.githubusercontent.com/18685030/DicomTestImages/master/SampleTestImages/mouse.jpeg'

    //The funtion with image link to translate to Base64
    toDataURL(imageURL, function (dataUrl) {
        //document.write('Result in string:', dataUrl)

        var image = new Image();
        //Getting the source from the span.
        //image.src = document.getElementById('source').innerHTML;

        //console.log(dataUrl);
        image.src = dataUrl;
        image.style = "width:400px;height:400px;display:inline-block";
        image.usemap = "#mouseMap";
        document.body.appendChild(image);
        console.log('base64 image loaded');
    })

    // >>>>>>> Part B: Converts Base64 to image

    //GETs image from location and converts to base64 using 'readAsDataURL' function
    function toDataURL(url, callback) {
        var httpRequest = new XMLHttpRequest();
        httpRequest.onload = function () {
            var fileReader = new FileReader();
            fileReader.onloadend = function () {
                callback(fileReader.result);
            }
            fileReader.readAsDataURL(httpRequest.response);
        };
        httpRequest.open('GET', url);
        httpRequest.responseType = 'blob';
        httpRequest.send();
    }


    //Cornserstone Library to present DICOM images in grid
    cornerstoneWADOImageLoader.external.cornerstone = cornerstone;

    //Array of image addresses. This array could be populated by URLs (to a storage device of DICOMs) from a MySQL query depending on user selection?

    var ImageArray = @Html.Raw(Json.Serialize(ViewData["DICOMArrayList"]));
    //console.log(ImageArray[1]);
    //console.log(ImageArray.length);

    //Forloop through image set and appends image to end of previous image

    for (var i = 0; i < ImageArray.length; i++) {
        console.log("Images", i+1, "of", ImageArray.length, "loaded");
        var imageNum = ImageArray[i];
        let imageId = "wadouri:" + imageNum;

        //Create new div element for each DICOM image and insert it befor the dicomImage div in body
        const imageDiv = document.createElement("div");
        imageDiv.style = "width:20vw; height:20vw; border: thin solid white; display:inline-block";
        var currentDiv = document.getElementById("dicomImage");
        currentDiv.parentNode.insertBefore(imageDiv, currentDiv);
        cornerstone.enable(imageDiv);

        //Load the DICOM image and allow supoprt tools for image zoom and contrast etc
        cornerstone.loadImage(imageId).then(function(image) {
        cornerstone.displayImage(imageDiv, image);
        cornerstoneTools.mouseInput.enable(imageDiv);
        cornerstoneTools.mouseWheelInput.enable(imageDiv);
        cornerstoneTools.wwwc.activate(imageDiv, 1); // ww/wc is the default tool for left mouse button
        cornerstoneTools.pan.activate(imageDiv, 2); // pan is the default tool for middle mouse button
        cornerstoneTools.zoom.activate(imageDiv, 4); // zoom is the default tool for right mouse button
        cornerstoneTools.zoomWheel.activate(imageDiv); // zoom is the default tool for middle mouse wheel
        //cornerstoneTools.imageStats.enable(imageElement);
        //console.log("Images", i, "of", ImageArray.length, "loaded");
        });

    }






    // //Forloop through jpg image set in assets folder and appends image to end of previous image
    // for (var i = 0; i < 3; i++) {
    // var jpgImg = document.createElement("img");
    // jpgImg.style = "width:300px; height:300px";
    // jpgImg.src = "assets/image" + i +".jpg"; //remove jpg if not required
    // document.body.appendChild(jpgImg);
    // }

    //console.log("Page Loaded :)");

</script>

